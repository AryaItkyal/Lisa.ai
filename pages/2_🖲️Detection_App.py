import os
import time
from PIL import Image
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import zipfile
import glob
from glob import glob
import seaborn as sns
import matplotlib.cm as cm
import keras
import cv2
from sklearn.cluster import KMeans
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from numpy import asarray
from skimage.io import imread
from skimage.transform import resize
from skimage.feature import hog
from skimage import exposure
import json
from streamlit_lottie import st_lottie
import base64



gallery_files = glob(os.path.join(".", "defaultimages", "*"))
gallery_dict = {image_path.split("/")[-1].split(".")[-2].replace("_", " ") : image_path
    for image_path in gallery_files}

def load_lottiefile(filepath : str):
    with open(filepath, "r") as f:
        return json.load(f)

import streamlit as st


st.image("cover page for project.png")
lottie_1 = load_lottiefile('lottiefiles/97353-colors-fork.json')
with st.sidebar:
    st_lottie(lottie_1, height = 100, 
           key = 'Start')
st.sidebar.title("**Lisa.ai ðŸŽ¨**")
st.sidebar.caption("**Paintings. Culture. Heritage. Preserved. âœ…**")
st.sidebar.caption("""Made by: \n 
Harsh Ratna \n
 Arya Itkyal \n
Harsh Tripathi""")
st.sidebar.caption("Look behind the scenes of Lisa AI [here](https://blog.streamlit.io/create-a-color-palette-from-any-image/).")
st.sidebar.markdown("---")

st.subheader("Is your Million-Dollar painting:art: AI-Generated?")
#st.markdown(""" #### Upload an image of your painting and check if it is generated by AI""")
#st.sidebar.markdown("---")
#st.sidebar.header("Settings")

from utils import feature_extraction_techniques, image_array, test_data_features, preprocess_test_image, extract_test_features, prediction

#feature_expander = st.sidebar.selectbox("Extract Features by", feature_extraction_techniques, help = """The paintings that you upload are understood by AI in the form of features. 
#Features can be extracted from the images in 3 ways here. Color Histogram works best for paintings""")
# =============
# Lets work on the main app now
# =============
gallery_tab, upload_tab= st.tabs(["Gallery", "Upload"])
with gallery_tab:
    options = list(gallery_dict.keys())
    index_manual = ['ai generated potrait (fake)', 'beautiful landscape by Edvard Munch (real)','inked man (fake)', 'Lady in despair by Edvard Munch (real)','man_in_blue_swirls_(fake)','Potrait of a man AI generated (Real)','The Scream by Edvard Munch (real)']
    file_name = st.selectbox("Select Art", 
                            options=options, index=index_manual.index("beautiful landscape by Edvard Munch (real)"))
    file = gallery_dict[file_name]

    if st.session_state.get("file_uploader") is not None:
        st.warning("To use the Gallery, remove the uploaded image first.")
    if st.session_state.get("image_url") not in ["", None]:
        st.warning("To use the Gallery, remove the image URL first.")

    img = Image.open(file)

with upload_tab:
    file = st.file_uploader("Upload Art", key="file_uploader")
    if file is not None:
        try:
            img = Image.open(file)
        except:
            st.error("The file you uploaded does not seem to be a valid image. Try uploading a png or jpg file.")
    if st.session_state.get("image_url") not in ["", None]:
        st.warning("To use the file uploader, remove the image URL first.")

# convert RGBA to RGB if necessary
#n_dims = np.array(img).shape[-1]
#if n_dims == 4:
    #background = Image.new("RGB", img.size, (255, 255, 255))
    #background.paste(img, mask=img.split()[3]) # 3 is the alpha channel
    #img = background

# show the image
with st.expander("ðŸ–¼  Artwork", expanded=True):
    st.image(img, use_column_width=True)


submit_botton = st.button('Submit Image', type = 'primary')
progress_bar1 = st.progress(0)
if submit_botton:
    st.markdown("Extracting Features...")
    image_array = preprocess_test_image(img)
    test_data_features = extract_test_features(image_array)
    test_input = test_data_features.reshape(1, -1)

    for perc_completed in range(100):
        time.sleep(0.02)
        progress_bar1.progress(perc_completed+1)
    st.success("Extracted Features Successfully!")
    time.sleep(0.3)

    progress_bar2 = st.progress(0)
    st.markdown("Passing Extracted Features to Model...")
    output = prediction(test_input)

    for perc_completed in range(100):
        time.sleep(0.02)
        progress_bar2.progress(perc_completed+1)
    st.success("Predicted Model Results are ready!")

    if(output == 0):
        st.header("Whoops! ðŸ˜ž")
        st.markdown("**The painting you selected is AI- Generated (Fake Painting). Stay Cautious!**")
    else:
        st.header("Yayy! ðŸ˜Š")
        st.markdown("**The painting you selected is real. Made by a real artist who worked very hard. Be Proud!**")
st.markdown("---")
    
